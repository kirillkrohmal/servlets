Создать модель User c полями name, login, email, createDate.

Необходимо создать сервлет UsersServlet и определить там методы do Get Post Put Delete.

Каждый метод сервлета должен выполнять только одно действие - создать пользователя, редактировать, получить. Удалить.

Тестирование сервлета осуществялять через Test RESTFull service

Для хранения данных использовать базу данных Postgresql.

Все взаимодействие с базой данных вынеси в отдельный класс UserStore. Этот класс должен быть потокобезопастный сингленот

https://www.journaldev.com/1377/java-singleton-design-pattern-best-practices-examples

Использовать Eager initiazitation.

В web.xml указать для UsersServlet режим load-on-startup

http://www.xyzws.com/servletfaq/what-is-%3Cloadonstartup%3E-in-webxml-file/24

В сервлете создать поле

private final UserStore users = UserStore.getInstance();

В задании так же объяснить почему при запуске сервера происходить создание коннекта к базе.

https://www.javaworld.com/article/3040564/learn-java/java-101-class-and-object-initialization-in-java.html


Все приложение должно быть разбита на слои.

Presentation - Это слой сервлетов. В них приложение должно получать данные от клиента и отдавать данные клиенту.

Logic - Выполнение бизнес логики. Например, проверить существует ли такой уже пользователь или нет. Если существует, то вернуть ошибку в слой Presentation.

Persistent - Слой для хранения данных. Может быть: базой данных, памятью или файловой системой.

Каждый слой взаимодействует с другим слоем за счет абстракции(интерфейса). Слои могут взаимодействовать только с ниже стоящим слоем.

Например. Presentation - Logic. Logic - Persisten. Нельзя Presentation - Persistent или Persisten - Logic.

Ваша задача.



Модель данных.

Создать модель User c полями id, name, login, email, createDate. Это модель данных.



Presentation layout.

Необходимо создать сервлет UserServlet и определить там методы doGet doPost. Это будет слой Presentation.

Метод doGet - должен отдавать список всех пользователей в системе.

Метод doPost - должен  уметь делать три вещи, создавать пользователя, обновлять поля пользователя, удалять пользователя.

Подумайте. как тут можно применить шаблон - https://github.com/peterarsentev/code_quality_principles#2-dispatch-pattern-instead-of-multiple-if-statements-and-switch-anti-pattern

Давайте посмотрим пример post-запроса.

Создание нового пользователя.

action=add - ключ указывает какое действие выполнить. у нас будут три ключа add, update, delete. их мы должно обработать в doPost.

name=petr - ключ указывает имя пользователя.

на стороне сервера мы извлекаем эти данные с помощью метода request.getParameter("action")

Обновление пользователя.

action=update

id=1 - первичный ключ - генерируется один раз. по нему мы будем искать пользователя в коллекции.

name=ivan - новое имя.

Удаление пользователя.

action=delete

id=1 - по ключу мы удаляем пользователя.



запрос примерно будет такой

curl -d "action=add&name=Petr" -X POST http://localhost:8080/users
Тестирование сервлета осуществлять через Test RESTFull service



ValidateService И
MemoryStore
И   первом реализовать валидацию а во втором сохранение и изменение, удаление, данных
если что то не понятно начните делать и пишите что именно не получается

начните с такого каркасса

в том что хранилище создай потоко безопасную коллекцию

и имплеменнтируй интерфейс сторе

в валидаторе нужно сделать проверки

например перед сохранением пользователя проверить что имя и емаил уникальны и не пустые

и потом вызвать метод добавления из хранилища и сохранить пользователя

или вернуть ответ что логин или емаил занят


Необходимо создать сервлет UserServlet и определить там методы doGet doPost. Это будет слой Presentation.

Метод doGet - должен отдавать список всех пользователей в системе.

Метод doPost - должен уметь делать три вещи, создавать пользователя, обновлять поля пользователя, удалять пользователя.